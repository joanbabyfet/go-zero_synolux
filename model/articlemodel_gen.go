// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleFieldNames          = builder.RawFieldNames(&Article{})
	articleRows                = strings.Join(articleFieldNames, ",")
	articleRowsExpectAutoSet   = strings.Join(stringx.Remove(articleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleRowsWithPlaceHolder = strings.Join(stringx.Remove(articleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articleModel interface {
		Insert(ctx context.Context, data *Article) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Article, error)
		Update(ctx context.Context, data *Article) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Article struct {
		Id         int64          `db:"id"`          // ID
		Catid      int64          `db:"catid"`       // 分類id
		Title      string         `db:"title"`       // 标题
		Info       string         `db:"info"`        // 简介
		Content    sql.NullString `db:"content"`     // 內容
		Img        string         `db:"img"`         // 图片
		Author     string         `db:"author"`      // 作者
		Extra      string         `db:"extra"`       // 扩展
		Sort       int64          `db:"sort"`        // 排序: 数字小的排前面
		Status     int64          `db:"status"`      // 状态: 0=禁用 1=启用
		CreateTime int64          `db:"create_time"` // 創建時間
		CreateUser string         `db:"create_user"` // 創建人
		UpdateTime int64          `db:"update_time"` // 修改時間
		UpdateUser string         `db:"update_user"` // 修改人
		DeleteTime int64          `db:"delete_time"` // 刪除時間
		DeleteUser string         `db:"delete_user"` // 刪除人
	}
)

func newArticleModel(conn sqlx.SqlConn) *defaultArticleModel {
	return &defaultArticleModel{
		conn:  conn,
		table: "`article`",
	}
}

func (m *defaultArticleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleModel) FindOne(ctx context.Context, id int64) (*Article, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleRows, m.table)
	var resp Article
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleModel) Insert(ctx context.Context, data *Article) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, articleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Catid, data.Title, data.Info, data.Content, data.Img, data.Author, data.Extra, data.Sort, data.Status, data.CreateUser, data.UpdateUser, data.DeleteTime, data.DeleteUser)
	return ret, err
}

func (m *defaultArticleModel) Update(ctx context.Context, data *Article) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Catid, data.Title, data.Info, data.Content, data.Img, data.Author, data.Extra, data.Sort, data.Status, data.CreateUser, data.UpdateUser, data.DeleteTime, data.DeleteUser, data.Id)
	return err
}

func (m *defaultArticleModel) tableName() string {
	return m.table
}
