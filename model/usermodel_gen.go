// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id           string `db:"id"`            // ID
		Origin       int64  `db:"origin"`        // 注册来源 1=H5 2=PC
		Username     string `db:"username"`      // 帐号
		Password     string `db:"password"`      // 密码
		Avatar       string `db:"avatar"`        // 头像
		Realname     string `db:"realname"`      // 姓名
		Sex          int64  `db:"sex"`           // 性别 0=女 1=男
		Email        string `db:"email"`         // 信箱
		PhoneCode    string `db:"phone_code"`    // 手机号国码
		Phone        string `db:"phone"`         // 手机号
		Address      string `db:"address"`       // 地址
		Salt         string `db:"salt"`          // 加密钥匙
		RoleId       int64  `db:"role_id"`       // 角色
		RegIp        string `db:"reg_ip"`        // 注册ip
		LoginTime    int64  `db:"login_time"`    // 最后登录时间
		LoginIp      string `db:"login_ip"`      // 最后登录IP
		LoginCountry string `db:"login_country"` // 最后登录国家
		Language     string `db:"language"`      // 语言
		Status       int64  `db:"status"`        // 状态: 0=禁用 1=启用
		CreateTime   int64  `db:"create_time"`   // 創建時間
		CreateUser   string `db:"create_user"`   // 創建人
		UpdateTime   int64  `db:"update_time"`   // 修改時間
		UpdateUser   string `db:"update_user"`   // 修改人
		DeleteTime   int64  `db:"delete_time"`   // 刪除時間
		DeleteUser   string `db:"delete_user"`   // 刪除人
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id string) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Origin, data.Username, data.Password, data.Avatar, data.Realname, data.Sex, data.Email, data.PhoneCode, data.Phone, data.Address, data.Salt, data.RoleId, data.RegIp, data.LoginTime, data.LoginIp, data.LoginCountry, data.Language, data.Status, data.CreateUser, data.UpdateUser, data.DeleteTime, data.DeleteUser)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Origin, data.Username, data.Password, data.Avatar, data.Realname, data.Sex, data.Email, data.PhoneCode, data.Phone, data.Address, data.Salt, data.RoleId, data.RegIp, data.LoginTime, data.LoginIp, data.LoginCountry, data.Language, data.Status, data.CreateUser, data.UpdateUser, data.DeleteTime, data.DeleteUser, data.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
