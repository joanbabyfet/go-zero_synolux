// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	feedbackFieldNames          = builder.RawFieldNames(&Feedback{})
	feedbackRows                = strings.Join(feedbackFieldNames, ",")
	feedbackRowsExpectAutoSet   = strings.Join(stringx.Remove(feedbackFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	feedbackRowsWithPlaceHolder = strings.Join(stringx.Remove(feedbackFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	feedbackModel interface {
		Insert(ctx context.Context, data *Feedback) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Feedback, error)
		Update(ctx context.Context, data *Feedback) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFeedbackModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Feedback struct {
		Id         int64          `db:"id"`          // ID
		Name       string         `db:"name"`        // 姓名
		Mobile     string         `db:"mobile"`      // 手机号
		Email      string         `db:"email"`       // 信箱
		Content    sql.NullString `db:"content"`     // 內容
		CreateTime int64          `db:"create_time"` // 創建時間
		CreateUser string         `db:"create_user"` // 創建人
		UpdateTime int64          `db:"update_time"` // 修改時間
		UpdateUser string         `db:"update_user"` // 修改人
		DeleteTime int64          `db:"delete_time"` // 刪除時間
		DeleteUser string         `db:"delete_user"` // 刪除人
	}
)

func newFeedbackModel(conn sqlx.SqlConn) *defaultFeedbackModel {
	return &defaultFeedbackModel{
		conn:  conn,
		table: "`feedback`",
	}
}

func (m *defaultFeedbackModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFeedbackModel) FindOne(ctx context.Context, id int64) (*Feedback, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", feedbackRows, m.table)
	var resp Feedback
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFeedbackModel) Insert(ctx context.Context, data *Feedback) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, feedbackRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Mobile, data.Email, data.Content, data.CreateUser, data.UpdateUser, data.DeleteTime, data.DeleteUser)
	return ret, err
}

func (m *defaultFeedbackModel) Update(ctx context.Context, data *Feedback) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, feedbackRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Mobile, data.Email, data.Content, data.CreateUser, data.UpdateUser, data.DeleteTime, data.DeleteUser, data.Id)
	return err
}

func (m *defaultFeedbackModel) tableName() string {
	return m.table
}
